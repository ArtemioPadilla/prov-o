// Base interface for PROV-O entities with an ID
interface ProvEntity {
    id: string;
}

// Core Class: Entity - Something that exists or has existed, physical or digital
interface Entity extends ProvEntity {
    generatedAtTime?: Date; // Time of generation
    invalidatedAtTime?: Date; // Time of invalidation
    wasGeneratedBy?: Activity; // Activity that generated this entity
    wasDerivedFrom?: Entity; // Entity this was derived from
    wasAttributedTo?: Agent; // Agent credited with this entity
    value?: any; // Optional value of the entity
}

// Core Class: Activity - Something that occurs over time, generating or using entities
interface Activity extends ProvEntity {
    startedAtTime?: Date; // Start time of the activity
    endedAtTime?: Date; // End time of the activity
    wasAssociatedWith?: Agent; // Agent associated with this activity
    used?: Entity[]; // Entities used by this activity
    generated?: Entity[]; // Entities generated by this activity
}

// Core Class: Agent - Something that bears responsibility, like a person or organization
interface Agent extends ProvEntity {
    actedOnBehalfOf?: Agent; // Agent this agent acted for
    wasAssociatedWith?: Activity[]; // Activities this agent was associated with
    wasAttributedTo?: Entity[]; // Entities attributed to this agent
}

// Expanded Class: Collection - An entity that aggregates other entities
interface Collection extends Entity {
    hadMember?: Entity[]; // Members of the collection
}

// Expanded Class: EmptyCollection - A collection with no members
interface EmptyCollection extends Collection {
    // Inherits hadMember, typically empty
}

// Expanded Class: Person - A human agent
interface Person extends Agent {
    name?: string; // Name of the person
}

// Expanded Class: Organization - An organizational agent
interface Organization extends Agent {
    name?: string; // Name of the organization
}

// Expanded Class: SoftwareAgent - A software-based agent
interface SoftwareAgent extends Agent {
    version?: string; // Version of the software
}

// Relationship: Derivation - A transformation of one entity into another
interface Derivation {
    derivedEntity: Entity; // The resulting entity
    sourceEntity: Entity; // The original entity
    activity?: Activity; // Activity that caused the derivation
    generation?: Generation; // Generation event
    usage?: Usage; // Usage event
}

// Specialized Relationship: WasDerivedFrom - Specific derivation relationship
interface WasDerivedFrom extends Derivation {
    // Inherits all Derivation properties
}

// Relationship: Attribution - Assigning an entity to an agent
interface Attribution {
    entity: Entity; // Entity being attributed
    agent: Agent; // Agent credited
}

// Specialized Relationship: WasAttributedTo - Specific attribution relationship
interface WasAttributedTo extends Attribution {
    // Inherits all Attribution properties
}

// Relationship: Association - Linking an activity with an agent
interface Association {
    activity: Activity; // Activity involved
    agent: Agent; // Agent associated
    role?: string; // Role of the agent in the activity
}

// Specialized Relationship: WasAssociatedWith - Specific association relationship
interface WasAssociatedWith extends Association {
    // Inherits all Association properties
}

// Relationship: Usage - An activity using an entity
interface Usage {
    activity: Activity; // Activity using the entity
    entity: Entity; // Entity being used
    time?: Date; // Time of usage
}

// Specialized Relationship: Used - Specific usage relationship
interface Used extends Usage {
    // Inherits all Usage properties
}

// Relationship: Generation - An activity generating an entity
interface Generation {
    entity: Entity; // Entity generated
    activity: Activity; // Activity that generated it
    time?: Date; // Time of generation
}

// Specialized Relationship: WasGeneratedBy - Specific generation relationship
interface WasGeneratedBy extends Generation {
    // Inherits all Generation properties
}

// Relationship: Delegation - One agent acting on behalf of another
interface Delegation {
    delegate: Agent; // Agent acting
    responsible: Agent; // Agent delegating
    activity?: Activity; // Activity context
}

// Specialized Relationship: ActedOnBehalfOf - Specific delegation relationship
interface ActedOnBehalfOf extends Delegation {
    // Inherits all Delegation properties
}

// Relationship: Influence - A general influence between entities, activities, or agents
interface Influence {
    influencer: ProvEntity; // Source of influence
    influencee: ProvEntity; // Target of influence
    type?: string; // Type of influence
}

// Specialized Relationships for Influence
interface WasInfluencedBy extends Influence {
    // Inherits all Influence properties
}

interface HadMember {
    collection: Collection; // The collection
    member: Entity; // The member entity
}
