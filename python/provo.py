from pydantic import BaseModel, Field
from typing import Optional, List, Any
from datetime import datetime

# Base class for PROV-O entities with an ID
class ProvEntity(BaseModel):
    id: str = Field(..., description="Unique identifier for the PROV entity")

    class Config:
        arbitrary_types_allowed = True  # Allow custom types like Activity, Entity, etc.

# Core Class: Entity - Something that exists or has existed
class Entity(ProvEntity):
    generated_at_time: Optional[datetime] = Field(None, alias="generatedAtTime")
    invalidated_at_time: Optional[datetime] = Field(None, alias="invalidatedAtTime")
    was_generated_by: Optional["Activity"] = Field(None, alias="wasGeneratedBy")
    was_derived_from: Optional["Entity"] = Field(None, alias="wasDerivedFrom")
    was_attributed_to: Optional["Agent"] = Field(None, alias="wasAttributedTo")
    value: Optional[Any] = Field(None, description="Optional value of the entity")

# Core Class: Activity - Something that occurs over time
class Activity(ProvEntity):
    started_at_time: Optional[datetime] = Field(None, alias="startedAtTime")
    ended_at_time: Optional[datetime] = Field(None, alias="endedAtTime")
    was_associated_with: Optional["Agent"] = Field(None, alias="wasAssociatedWith")
    used: Optional[List["Entity"]] = Field(None, description="Entities used by this activity")
    generated: Optional[List["Entity"]] = Field(None, description="Entities generated by this activity")

# Core Class: Agent - Something that bears responsibility
class Agent(ProvEntity):
    acted_on_behalf_of: Optional["Agent"] = Field(None, alias="actedOnBehalfOf")
    was_associated_with: Optional[List["Activity"]] = Field(None, alias="wasAssociatedWith")
    was_attributed_to: Optional[List["Entity"]] = Field(None, alias="wasAttributedTo")

# Expanded Class: Collection - An entity that aggregates other entities
class Collection(Entity):
    had_member: Optional[List["Entity"]] = Field(None, alias="hadMember")

# Expanded Class: EmptyCollection - A collection with no members
class EmptyCollection(Collection):
    had_member: Optional[List["Entity"]] = Field(default_factory=list, alias="hadMember")  # Always empty by default

# Expanded Class: Person - A human agent
class Person(Agent):
    name: Optional[str] = Field(None, description="Name of the person")

# Expanded Class: Organization - An organizational agent
class Organization(Agent):
    name: Optional[str] = Field(None, description="Name of the organization")

# Expanded Class: SoftwareAgent - A software-based agent
class SoftwareAgent(Agent):
    version: Optional[str] = Field(None, description="Version of the software")

# Relationship: Derivation - A transformation of one entity into another
class Derivation(BaseModel):
    derived_entity: Entity = Field(..., alias="derivedEntity")
    source_entity: Entity = Field(..., alias="sourceEntity")
    activity: Optional[Activity] = Field(None, description="Activity that caused the derivation")
    generation: Optional["Generation"] = Field(None, description="Generation event")
    usage: Optional["Usage"] = Field(None, description="Usage event")

# Specialized Relationship: WasDerivedFrom - Specific derivation relationship
class WasDerivedFrom(Derivation):
    pass  # Inherits all from Derivation

# Relationship: Attribution - Assigning an entity to an agent
class Attribution(BaseModel):
    entity: Entity = Field(..., description="Entity being attributed")
    agent: Agent = Field(..., description="Agent credited")

# Specialized Relationship: WasAttributedTo - Specific attribution relationship
class WasAttributedTo(Attribution):
    pass  # Inherits all from Attribution

# Relationship: Association - Linking an activity with an agent
class Association(BaseModel):
    activity: Activity = Field(..., description="Activity involved")
    agent: Agent = Field(..., description="Agent associated")
    role: Optional[str] = Field(None, description="Role of the agent in the activity")

# Specialized Relationship: WasAssociatedWith - Specific association relationship
class WasAssociatedWith(Association):
    pass  # Inherits all from Association

# Relationship: Usage - An activity using an entity
class Usage(BaseModel):
    activity: Activity = Field(..., description="Activity using the entity")
    entity: Entity = Field(..., description="Entity being used")
    time: Optional[datetime] = Field(None, description="Time of usage")

# Specialized Relationship: Used - Specific usage relationship
class Used(Usage):
    pass  # Inherits all from Usage

# Relationship: Generation - An activity generating an entity
class Generation(BaseModel):
    entity: Entity = Field(..., description="Entity generated")
    activity: Activity = Field(..., description="Activity that generated it")
    time: Optional[datetime] = Field(None, description="Time of generation")

# Specialized Relationship: WasGeneratedBy - Specific generation relationship
class WasGeneratedBy(Generation):
    pass  # Inherits all from Generation

# Relationship: Delegation - One agent acting on behalf of another
class Delegation(BaseModel):
    delegate: Agent = Field(..., description="Agent acting")
    responsible: Agent = Field(..., description="Agent delegating")
    activity: Optional[Activity] = Field(None, description="Activity context")

# Specialized Relationship: ActedOnBehalfOf - Specific delegation relationship
class ActedOnBehalfOf(Delegation):
    pass  # Inherits all from Delegation

# Relationship: Influence - A general influence between entities, activities, or agents
class Influence(BaseModel):
    influencer: ProvEntity = Field(..., description="Source of influence")
    influencee: ProvEntity = Field(..., description="Target of influence")
    type: Optional[str] = Field(None, description="Type of influence")

# Specialized Relationship: WasInfluencedBy - Specific influence relationship
class WasInfluencedBy(Influence):
    pass  # Inherits all from Influence

# Relationship: HadMember - Linking a collection to its members
class HadMember(BaseModel):
    collection: Collection = Field(..., description="The collection")
    member: Entity = Field(..., description="The member entity")

# Resolve forward references
Entity.update_forward_refs()
Activity.update_forward_refs()
Agent.update_forward_refs()
Collection.update_forward_refs()
Derivation.update_forward_refs()

# Example usage
if __name__ == "__main__":
    # Create an agent (user)
    user = Person(id="user1", name="Alice")
    
    # Create an activity (posting)
    post_activity = Activity(id="post1", started_at_time=datetime.now())
    
    # Create an entity (post)
    post = Entity(id="post1", was_generated_by=post_activity, was_attributed_to=user)
    
    # Create a derivation (repost)
    repost = Entity(id="repost1")
    derivation = WasDerivedFrom(derived_entity=repost, source_entity=post, activity=post_activity)
    
    # Validate and serialize
    print(post.dict(exclude_unset=True))
    print(derivation.dict(exclude_unset=True))
